{"version":3,"sources":["Display/Display.tsx","redux/actions.ts","common/SettingsDisplay/SettingsDisplay.tsx","common/Button/Button.tsx","App.tsx","redux/store.ts","redux/reducer.ts","index.tsx","Display/Display.module.css","common/SettingsDisplay/SettingsDisplay.module.css"],"names":["Display","props","value","change","state","startValue","counterState","maxValue","currentValue","className","classes","display","ACTION_TYPE","incrementValueAC","type","INCREMENT_VALUE","resetSetValueAC","RESET_SET_VALUE","changeMaxValueAC","CHANGE_MAX_VALUE","changeStartValueAC","CHANGE_START_VALUE","SettingsDisplay","dispatch","useDispatch","title","redError","onChange","e","currentTarget","isFinite","action","actionCreator","Button","onClick","disabled","buttonDisabled","buttonTitle","App","preloadedState","counter","useSelector","disableSetButton","disableIncButton","disableResetButton","initialState","rootReducer","combineReducers","persistedStateString","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.5f646c2e.chunk.js","sourcesContent":["import React from 'react'\r\nimport {StateType} from \"../redux/reducer\";\r\nimport classes from './Display.module.css'\r\n\r\ntype DisplayPropsType = {\r\n    state:StateType\r\n}\r\n\r\n\r\nexport function Display(props:DisplayPropsType) {\r\n\r\n    const change = props.state.change\r\n    const startValue = props.state.counterState.startValue\r\n    const maxValue = props.state.counterState.maxValue\r\n    const currentValue = props.state.counterState.currentValue\r\n\r\n    let value\r\n    if (startValue<maxValue&&startValue>=0) {\r\n        value = change? \"Enter values and press 'set'\":currentValue\r\n    } else value = \"incorrect value\"\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.display}>\r\n                <div className={classes.value}>\r\n                    {value}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","\r\n// enum Action type\r\nexport enum ACTION_TYPE {\r\n    INCREMENT_VALUE = \"INCREMENT_VALUE\",\r\n    RESET_SET_VALUE = \"RESET_SET_VALUE\",\r\n    CHANGE_MAX_VALUE = \"CHANGE_MAX_VALUE\",\r\n    CHANGE_START_VALUE = \"CHANGE_START_VALUE\",\r\n}\r\n\r\n// Action Types\r\nexport type IncrementValueActionType = {\r\n    type: ACTION_TYPE.INCREMENT_VALUE\r\n}\r\n\r\nexport type ResetSetValueActionType = {\r\n    type:ACTION_TYPE.RESET_SET_VALUE\r\n}\r\n\r\nexport type ChangeMaxValueActionType = {\r\n    type: ACTION_TYPE.CHANGE_MAX_VALUE\r\n    maxValue:number\r\n}\r\n\r\nexport type ChangeStartValueActionType = {\r\n    type: ACTION_TYPE.CHANGE_START_VALUE\r\n    startValue:number\r\n}\r\n\r\n// General Action Type\r\nexport type ActionsType =\r\n    IncrementValueActionType\r\n    | ResetSetValueActionType\r\n    | ChangeMaxValueActionType\r\n    | ChangeStartValueActionType\r\n\r\n\r\n// ActionCreators\r\nexport const incrementValueAC = ():IncrementValueActionType => {\r\n    return {type:ACTION_TYPE.INCREMENT_VALUE}\r\n}\r\n\r\nexport const resetSetValueAC = ():ResetSetValueActionType => {\r\n    return {type:ACTION_TYPE.RESET_SET_VALUE}\r\n}\r\n\r\nexport const changeMaxValueAC = (maxValue:number):ChangeMaxValueActionType => {\r\n    return {type:ACTION_TYPE.CHANGE_MAX_VALUE, maxValue}\r\n}\r\n\r\nexport const changeStartValueAC = (startValue:number):ChangeStartValueActionType => {\r\n    return {type:ACTION_TYPE.CHANGE_START_VALUE, startValue}\r\n}","import React, {ChangeEvent} from 'react';\r\nimport classes from \"./SettingsDisplay.module.css\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionsType} from \"../../redux/actions\";\r\nimport {StateType} from \"../../redux/reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\ntype SettingsDisplayType = {\r\n    state:StateType\r\n    actionCreator:(value:number)=>ActionsType\r\n    title:string\r\n    value:number\r\n}\r\n\r\nexport function SettingsDisplay(props:SettingsDisplayType) {\r\n\r\n    const dispatch = useDispatch<Dispatch<ActionsType>>()\r\n\r\n\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value\r\n        if (!isFinite(+value)) return\r\n        else {\r\n            const action = props.actionCreator(+value)\r\n            dispatch(action)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {props.title}:  <input  type = \"number\"\r\n                                 className={props.state.counterState.maxValue > props.state.counterState.startValue && props.state.counterState.startValue>=0 ? \"\":classes.redError}\r\n                                 onChange={ onChangeHandler}\r\n                                 value={props.value}\r\n        />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {ActionsType} from \"../../redux/actions\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype ButtonPropsType = {\r\n    buttonTitle: string\r\n    buttonDisabled: boolean\r\n    actionCreator:()=>ActionsType\r\n\r\n}\r\n\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n\r\n\r\n    const dispatch = useDispatch<Dispatch<ActionsType>>()\r\n\r\n    const onClickButton = () => {\r\n        dispatch(props.actionCreator())\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={onClickButton}\r\n                    disabled={props.buttonDisabled}\r\n            >\r\n                {props.buttonTitle}\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Display} from \"./Display/Display\";\r\n\r\nimport {useSelector} from \"react-redux\";\r\nimport {changeMaxValueAC, changeStartValueAC, incrementValueAC, resetSetValueAC} from \"./redux/actions\";\r\nimport {StateType} from \"./redux/reducer\";\r\nimport {AppRootStateType} from \"./redux/store\";\r\nimport {SettingsDisplay} from \"./common/SettingsDisplay/SettingsDisplay\";\r\nimport {Button} from \"./common/Button/Button\";\r\n\r\nfunction App() {\r\n    //тип экспортируется из StoreRedux, а второй тип это тип инициализационного стейта, параметры callback state => state.counter\r\n    // типизация useSelectora 1 параметр это тип Стора полыйчный из редьюсера, вторым параметром, то что он возвращает, типизация иницилазционного стейта.\r\n    const counter = useSelector<AppRootStateType, StateType>( state=>state.counter)\r\n\r\n    const disableSetButton = counter.counterState.startValue < 0 || counter.counterState.maxValue < 0 || counter.counterState.startValue >= counter.counterState.maxValue\r\n\r\n    const disableIncButton =\r\n        counter.change ||\r\n        counter.counterState.currentValue === counter.counterState.maxValue\r\n\r\n    const disableResetButton = counter.change || counter.counterState.currentValue === counter.counterState.startValue\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n                <div className=\"counter\">\r\n                    {/*<div className=\"display\">*/}\r\n                        <Display state={counter}/>\r\n                    {/*</div>*/}\r\n                    <div className=\"display-buttons\">\r\n                        <Button buttonTitle={'INC'} buttonDisabled={disableIncButton} actionCreator={incrementValueAC}/>\r\n                        <Button buttonTitle={'RESET'} buttonDisabled={disableResetButton} actionCreator={resetSetValueAC}/>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"settings\">\r\n                    <SettingsDisplay title={'START VALUE'} state={counter} actionCreator={changeStartValueAC} value={counter.counterState.startValue} />\r\n                    <SettingsDisplay title={'MAX VALUE'}  state={counter} actionCreator={changeMaxValueAC} value={counter.counterState.maxValue}/>\r\n                    <Button buttonTitle={'SET'} buttonDisabled={disableSetButton} actionCreator={resetSetValueAC}/>\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\"\r\nimport {counterReducer} from \"./reducer\";\r\n\r\nconst rootReducer =  combineReducers(\r\n    {\r\n        counter:counterReducer,\r\n        // next reducer\r\n    }\r\n)\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nlet preloadedState\r\nconst persistedStateString = localStorage.getItem('app-state')\r\nif (persistedStateString) {\r\n    preloadedState = JSON.parse(persistedStateString)\r\n}\r\n\r\n\r\nexport const store = createStore(rootReducer, preloadedState)\r\n\r\nstore.subscribe( ()=>{\r\n    // при изменении стейта это код будет отрабатываться\r\n    localStorage.setItem('app-state', JSON.stringify(store.getState()))\r\n} )\r\n\r\n\r\n\r\n\r\n","import {ACTION_TYPE, ActionsType} from \"./actions\";\r\n\r\n\r\n//types\r\ntype CounterStateType = {\r\n    startValue:number\r\n    maxValue:number\r\n    currentValue:number\r\n}\r\n\r\nexport type StateType = {\r\n    counterState:CounterStateType\r\n    change:boolean\r\n}\r\n\r\n//initial State\r\nexport const initialState:StateType = {\r\n    counterState: {\r\n        startValue: 0,\r\n        maxValue: 5,\r\n        currentValue: 0,\r\n    },\r\n    change:false,\r\n}\r\n\r\n\r\n// Reducers\r\nexport const counterReducer = (state:StateType = initialState, action:ActionsType ):StateType =>{\r\n    switch (action.type) {\r\n        case ACTION_TYPE.INCREMENT_VALUE: {\r\n            return {...state, counterState:{...state.counterState, currentValue:state.counterState.currentValue+1} }\r\n        }\r\n\r\n        case ACTION_TYPE.RESET_SET_VALUE: {\r\n            return {...state, counterState:{...state.counterState, currentValue:state.counterState.startValue}, change:false}\r\n        }\r\n\r\n        case ACTION_TYPE.CHANGE_MAX_VALUE:{\r\n            return {...state, counterState:{...state.counterState, maxValue:action.maxValue}, change:true}\r\n        }\r\n\r\n        case ACTION_TYPE.CHANGE_START_VALUE: {\r\n            return {...state, counterState: {...state.counterState, startValue:action.startValue}, change:true}\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,  document.getElementById('root'));\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2b-ii\",\"value\":\"Display_value__32S-5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"redError\":\"SettingsDisplay_redError__nIMuC\"};"],"sourceRoot":""}