{"version":3,"sources":["Display/Display.tsx","redux/actions.ts","common/SettingsDisplay/SettingsDisplay.tsx","common/Button/Button.tsx","App.tsx","serviceWorker.ts","redux/store.ts","redux/reducer.ts","index.tsx","Display/Display.module.css","common/SettingsDisplay/SettingsDisplay.module.css"],"names":["Display","props","value","change","state","startValue","counterState","maxValue","currentValue","Fragment","className","classes","display","ACTION_TYPE","incrementValueAC","type","INCREMENT_VALUE","resetSetValueAC","RESET_SET_VALUE","changeMaxValueAC","CHANGE_MAX_VALUE","changeStartValueAC","CHANGE_START_VALUE","SettingsDisplay","dispatch","useDispatch","title","redError","onChange","e","currentTarget","isFinite","action","actionCreator","Button","onClick","disabled","buttonDisabled","buttonTitle","App","counter","useSelector","disableSetButton","disableIncButton","disableResetButton","Boolean","window","location","hostname","match","preloadedState","initialState","rootReducer","combineReducers","persistedStateString","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.247cd126.chunk.js","sourcesContent":["import React from 'react'\r\nimport {StateType} from \"../redux/reducer\";\r\nimport classes from './Display.module.css'\r\n\r\ntype DisplayPropsType = {\r\n    state:StateType\r\n}\r\n\r\n\r\nexport function Display(props:DisplayPropsType) {\r\n\r\n    const change = props.state.change\r\n    const startValue = props.state.counterState.startValue\r\n    const maxValue = props.state.counterState.maxValue\r\n    const currentValue = props.state.counterState.currentValue\r\n\r\n    // const style = change? startValue>=0 && maxValue>startValue? \"classes.blueMessage\": \"classes.redError\" : currentValue <maxValue? \"\":\"classes.redError\"\r\n\r\n    // const style = startValue>=0 && maxValue>startValue? classes.value:classes.redError\r\n\r\n    let value\r\n    if (startValue<maxValue&&startValue>=0) {\r\n        value = change? \"Enter values and press 'set'\":currentValue\r\n    } else value = \"incorrect value\"\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={classes.display}>\r\n                <div className={classes.value}>\r\n                    {value}\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}","\r\n// enum Action type\r\nexport enum ACTION_TYPE {\r\n    INCREMENT_VALUE = \"INCREMENT_VALUE\",\r\n    RESET_SET_VALUE = \"RESET_SET_VALUE\",\r\n    CHANGE_MAX_VALUE = \"CHANGE_MAX_VALUE\",\r\n    CHANGE_START_VALUE = \"CHANGE_START_VALUE\",\r\n}\r\n\r\n// Action Types\r\nexport type IncrementValueActionType = {\r\n    type: ACTION_TYPE.INCREMENT_VALUE\r\n}\r\n\r\nexport type ResetSetValueActionType = {\r\n    type:ACTION_TYPE.RESET_SET_VALUE\r\n}\r\n\r\nexport type ChangeMaxValueActionType = {\r\n    type: ACTION_TYPE.CHANGE_MAX_VALUE\r\n    maxValue:number\r\n}\r\n\r\nexport type ChangeStartValueActionType = {\r\n    type: ACTION_TYPE.CHANGE_START_VALUE\r\n    startValue:number\r\n}\r\n\r\n// General Action Type\r\nexport type ActionsType =\r\n    IncrementValueActionType\r\n    | ResetSetValueActionType\r\n    | ChangeMaxValueActionType\r\n    | ChangeStartValueActionType\r\n\r\n\r\n// ActionCreators\r\nexport const incrementValueAC = ():IncrementValueActionType => {\r\n    return {type:ACTION_TYPE.INCREMENT_VALUE}\r\n}\r\n\r\nexport const resetSetValueAC = ():ResetSetValueActionType => {\r\n    return {type:ACTION_TYPE.RESET_SET_VALUE}\r\n}\r\n\r\nexport const changeMaxValueAC = (maxValue:number):ChangeMaxValueActionType => {\r\n    return {type:ACTION_TYPE.CHANGE_MAX_VALUE, maxValue}\r\n}\r\n\r\nexport const changeStartValueAC = (startValue:number):ChangeStartValueActionType => {\r\n    return {type:ACTION_TYPE.CHANGE_START_VALUE, startValue}\r\n}","import React, {ChangeEvent} from 'react';\r\nimport classes from \"./SettingsDisplay.module.css\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionsType} from \"../../redux/actions\";\r\nimport {StateType} from \"../../redux/reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\ntype SettingsDisplayType = {\r\n    state:StateType\r\n    actionCreator:(value:number)=>ActionsType\r\n    title:string\r\n    value:number\r\n}\r\n\r\nexport function SettingsDisplay(props:SettingsDisplayType) {\r\n\r\n    const dispatch = useDispatch<Dispatch<ActionsType>>()\r\n\r\n\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value\r\n        if (!isFinite(+value)) return\r\n        else {\r\n            const action = props.actionCreator(+value)\r\n            dispatch(action)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {props.title}:  <input  type = \"number\"\r\n                                 className={props.state.counterState.maxValue > props.state.counterState.startValue && props.state.counterState.startValue>=0 ? \"\":classes.redError}\r\n                                 onChange={ onChangeHandler}\r\n                                 value={props.value}\r\n        />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {ActionsType} from \"../../redux/actions\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype ButtonPropsType = {\r\n    buttonTitle: string\r\n    buttonDisabled: boolean\r\n    actionCreator:()=>ActionsType\r\n\r\n}\r\n\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n\r\n\r\n    const dispatch = useDispatch<Dispatch<ActionsType>>()\r\n\r\n    const onClickButton = () => {\r\n        dispatch(props.actionCreator())\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={onClickButton}\r\n                    disabled={props.buttonDisabled}\r\n            >\r\n                {props.buttonTitle}\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Display} from \"./Display/Display\";\r\n\r\nimport {useSelector} from \"react-redux\";\r\nimport {changeMaxValueAC, changeStartValueAC, incrementValueAC, resetSetValueAC} from \"./redux/actions\";\r\nimport {StateType} from \"./redux/reducer\";\r\nimport {AppRootStateType} from \"./redux/store\";\r\nimport {SettingsDisplay} from \"./common/SettingsDisplay/SettingsDisplay\";\r\nimport {Button} from \"./common/Button/Button\";\r\n\r\nfunction App() {\r\n    //тип экспортируется из StoreRedux, а второй тип это тип инициализационного стейта, параметры callback state => state.counter\r\n    // типизация useSelectora 1 параметр это тип Стора полыйчный из редьюсера, вторым параметром, то что он возвращает, типизация иницилазционного стейта.\r\n    const counter = useSelector<AppRootStateType, StateType>( state=>state.counter)\r\n\r\n    const disableSetButton = counter.counterState.startValue < 0 || counter.counterState.maxValue < 0 || counter.counterState.startValue >= counter.counterState.maxValue\r\n\r\n    const disableIncButton =\r\n        counter.change ||\r\n        counter.counterState.currentValue === counter.counterState.maxValue\r\n\r\n    const disableResetButton = counter.change || counter.counterState.currentValue === counter.counterState.startValue\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n                <div className=\"counter\">\r\n                    {/*<div className=\"display\">*/}\r\n                        <Display state={counter}/>\r\n                    {/*</div>*/}\r\n                    <div className=\"display-buttons\">\r\n                        <Button buttonTitle={'INC'} buttonDisabled={disableIncButton} actionCreator={incrementValueAC}/>\r\n                        <Button buttonTitle={'RESET'} buttonDisabled={disableResetButton} actionCreator={resetSetValueAC}/>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"settings\">\r\n                    <SettingsDisplay title={'START VALUE'} state={counter} actionCreator={changeStartValueAC} value={counter.counterState.startValue} />\r\n                    <SettingsDisplay title={'MAX VALUE'}  state={counter} actionCreator={changeMaxValueAC} value={counter.counterState.maxValue}/>\r\n                    <Button buttonTitle={'SET'} buttonDisabled={disableSetButton} actionCreator={resetSetValueAC}/>\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\"\r\nimport {counterReducer} from \"./reducer\";\r\n\r\n\r\n//если несколько редюсеров то делаем кобайн\r\nconst rootReducer =  combineReducers(\r\n    {\r\n        counter:counterReducer,\r\n        // next reducer\r\n    }\r\n)\r\n\r\n// создаем тип стейта, отдаем в него рутовый редюсер\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nlet preloadedState\r\nconst persistedStateString = localStorage.getItem('app-state')\r\nif (persistedStateString) {\r\n    preloadedState = JSON.parse(persistedStateString)\r\n}\r\n\r\n\r\n// создаем store, как аргумент  передаем редюсер\r\nexport const store = createStore(rootReducer, preloadedState)\r\n\r\nstore.subscribe( ()=>{\r\n    // при изменении стейта это код будет отрабатываться\r\n    localStorage.setItem('app-state', JSON.stringify(store.getState()))\r\n} )\r\n\r\n\r\n\r\n\r\n","import {ACTION_TYPE, ActionsType} from \"./actions\";\r\n\r\n\r\n//types\r\n\r\n\r\ntype CounterStateType = {\r\n    startValue:number\r\n    maxValue:number\r\n    currentValue:number\r\n}\r\n\r\nexport type StateType = {\r\n    counterState:CounterStateType\r\n    change:boolean\r\n}\r\n\r\n//initial State\r\nexport const initialState:StateType = {\r\n    counterState: {\r\n        startValue: 0,\r\n        maxValue: 5,\r\n        currentValue: 0,\r\n    },\r\n    change:false,\r\n}\r\n\r\n\r\n// Reducers\r\n\r\nexport const counterReducer = (state:StateType = initialState, action:ActionsType ):StateType =>{\r\n    switch (action.type) {\r\n        case ACTION_TYPE.INCREMENT_VALUE: {\r\n            return {...state, counterState:{...state.counterState, currentValue:state.counterState.currentValue+1} }\r\n        }\r\n\r\n        case ACTION_TYPE.RESET_SET_VALUE: {\r\n            return {...state, counterState:{...state.counterState, currentValue:state.counterState.startValue}, change:false}\r\n        }\r\n\r\n        case ACTION_TYPE.CHANGE_MAX_VALUE:{\r\n            return {...state, counterState:{...state.counterState, maxValue:action.maxValue}, change:true}\r\n        }\r\n\r\n        case ACTION_TYPE.CHANGE_START_VALUE: {\r\n            return {...state, counterState: {...state.counterState, startValue:action.startValue}, change:true}\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2b-ii\",\"value\":\"Display_value__32S-5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"redError\":\"SettingsDisplay_redError__nIMuC\"};"],"sourceRoot":""}